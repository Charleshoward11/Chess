#BlueJ class context
comment0.params=
comment0.target=Board()
comment0.text=\r\n\ Constructor\ for\ objects\ of\ class\ Board\r\n
comment1.params=
comment1.target=Board\ resetBoard()
comment1.text=\r\n\ Sets\ up\ the\ board\ in\ the\ default\ starting\ state\ for\ chess.\r\n
comment10.params=p
comment10.target=boolean\ placePiece(Piece)
comment10.text=\r\n\ Places\ a\ piece\ on\ the\ board\ based\ on\ the\ piece's\ internal\ x\ and\ y\ values.\r\n\ \r\n\ Returns\ true\ if\ successful,\ false\ if\ not\ (e.g.\ if\ the\ requested\ square\ is\ occupied).\r\n\ Maybe\ this\ should\ throw\ an\ exception\ or\ something.\r\n\ \r\n\ (Somewhat\ deprecated)\r\n
comment11.params=m
comment11.target=boolean\ movePiece(Move)
comment11.text=\r\n\ Move\ a\ piece\ from\ one\ square\ to\ another.\r\n\ \r\n\ Returns\ true\ if\ successful,\ false\ if\ not\ (e.g.\ if\ the\ requested\ square\ is\ occupied).\r\n\ Maybe\ this\ should\ throw\ an\ exception\ or\ something.\r\n
comment12.params=fX\ fY\ tX\ tY
comment12.target=boolean\ movePiece(int,\ int,\ int,\ int)
comment13.params=from\ to
comment13.target=boolean\ movePiece(Square,\ Square)
comment14.params=p\ target
comment14.target=boolean\ movePiece(Piece,\ Square)
comment15.params=m
comment15.target=Move\ cloneMove(Move)
comment15.text=\r\n\ Takes\ in\ a\ move\ for\ any\ board,\r\n\ and\ returns\ an\ identical\ move\ on\ this\ board.\r\n
comment16.params=k
comment16.target=boolean\ isInCheck(King)
comment16.text=\r\n\ Takes\ in\ a\ King,\ and\ checks\ every\ possible\ move\ in\ the\ other\ player's\ turn.\r\n\ \r\n\ @returns\ true\ if\ the\ given\ King\ is\ in\ check.\r\n
comment17.params=m\ isWhite
comment17.target=boolean\ wouldCauseCheck(Move,\ boolean)
comment17.text=\r\n\ Takes\ in\ a\ Move\ and\ a\ Piece's\ color\ (represented\ by\ a\ boolean).\r\n\ Maybe\ I\ can\ refactor\ all\ this\ into\ an\ all-purpose\ method\ that\ \r\n\ returns\ an\ enum\ stating\ WHICH\ player\ is\ in\ check.\ The\ less\ \r\n\ clone-boards\ I\ have\ to\ create,\ the\ better.\r\n\ \r\n\ @returns\ true\ if\ the\ Move\ would\ put\ the\ other\ player's\ King\ in\ check.\r\n
comment18.params=k\ r
comment18.target=boolean\ canCastle(King,\ Rook)
comment19.params=k\ r
comment19.target=void\ castle(King,\ Rook)
comment19.text=\r\n\ Maybe\ I\ can\ put\ the\ castling\ moves\ in\ their\ own\ little\ moveList.\r\n
comment2.params=
comment2.target=Board\ clone()
comment20.params=
comment20.target=java.util.ArrayList\ getWhitePieces()
comment21.params=
comment21.target=java.util.ArrayList\ getBlackPieces()
comment22.params=isWhite
comment22.target=java.util.ArrayList\ getPieces(boolean)
comment22.text=\r\n\ Combined\ version\ of\ two\ older\ methods,\ getWhitePieces()\ and\ getBlackPieces().\r\n\ \r\n\ @param\ isWhite\ \ \ \ Whether\ the\ player\ is\ black\ or\ white.\r\n\ @return\ \ \ \ \ \ \ \ \ \ \ That\ player's\ pieces.\r\n
comment23.params=
comment23.target=java.util.ArrayList\ getAllPieces()
comment24.params=
comment24.target=King\ getWhiteKing()
comment25.params=
comment25.target=King\ getBlackKing()
comment26.params=isWhite
comment26.target=King\ getKing(boolean)
comment27.params=isWhite
comment27.target=java.util.ArrayList\ getRooks(boolean)
comment27.text=\r\n\ Gets\ an\ ArrayList\ of\ all\ rooks\ of\ a\ specified\ player.\r\n\ Used\ with\ castling.\r\n\ \r\n\ @param\ isWhite\ \ \ \ Whether\ the\ player\ is\ black\ or\ white.\r\n\ @return\ \ \ \ \ \ \ \ \ \ \ That\ player's\ rooks.\r\n
comment3.params=
comment3.target=void\ printBoard()
comment3.text=\r\n\ Prints\ out\ a\ text\ representation\ of\ the\ board\ to\ the\ console.\r\n\ Used\ for\ testing.\r\n
comment4.params=p\ getChecks
comment4.target=ValidMoveList\ getValidMoves(Piece,\ boolean)
comment4.text=\r\n\ Requests\ a\ piece's\ moveset,\ then\ does\ a\ second\ pass\ on\ it\ to\ apply\ it\ to\ the\ board's\ current\ state.\r\n
comment5.params=p
comment5.target=ValidMoveList\ getValidMoves(Piece)
comment6.params=s
comment6.target=ValidMoveList\ getValidMoves(Square)
comment7.params=x\ y
comment7.target=ValidMoveList\ getValidMoves(int,\ int)
comment8.params=x\ y
comment8.target=Square\ getSquare(int,\ int)
comment9.params=x\ y
comment9.target=Piece\ getPiece(int,\ int)
numComments=28
