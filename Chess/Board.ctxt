#BlueJ class context
comment0.params=
comment0.target=Board()
comment0.text=\r\n\ Constructor\ for\ objects\ of\ class\ Board\r\n
comment1.params=
comment1.target=Board\ resetBoard()
comment1.text=\r\n\ Sets\ up\ the\ board\ in\ the\ default\ starting\ state\ for\ chess.\r\n
comment10.params=x\ y
comment10.target=Square\ getSquare(int,\ int)
comment11.params=x\ y
comment11.target=Piece\ getPiece(int,\ int)
comment12.params=p
comment12.target=boolean\ placePiece(Piece)
comment12.text=\r\n\ (Somewhat\ deprecated)\r\n\ Places\ a\ piece\ on\ the\ board\ based\ on\ the\ piece's\ internal\ x\ and\ y\ values.\r\n\ \r\n\ @return\ \ \ \ \ \ \ \ \ \ true\ if\ successful.\r\n
comment13.params=m
comment13.target=void\ movePiece(Move)
comment13.text=\r\n\ Move\ a\ piece\ from\ one\ square\ to\ another.\ Also\ changes\ whoseTurn.\r\n\ \r\n\ @param\ m\ \ \ \ The\ Move\ to\ perform.\r\n
comment14.params=fX\ fY\ tX\ tY
comment14.target=void\ movePiece(int,\ int,\ int,\ int)
comment15.params=from\ to
comment15.target=void\ movePiece(Square,\ Square)
comment16.params=p\ target
comment16.target=void\ movePiece(Piece,\ Square)
comment17.params=m
comment17.target=Move\ cloneMove(Move)
comment17.text=\r\n\ Takes\ in\ a\ move\ for\ any\ board,\r\n\ and\ returns\ an\ identical\ move\ on\ this\ board.\r\n
comment18.params=k
comment18.target=boolean\ isInCheck(King)
comment18.text=\r\n\ Takes\ in\ a\ King,\ and\ checks\ every\ possible\ move\ in\ the\ other\ player's\ turn.\r\n\ \r\n\ @returns\ true\ if\ the\ given\ King\ is\ in\ check.\r\n
comment19.params=m\ isWhite
comment19.target=boolean\ wouldCauseCheck(Move,\ boolean)
comment19.text=\r\n\ Takes\ in\ a\ Move\ and\ a\ player's\ color\ (represented\ by\ a\ boolean).\r\n\ Maybe\ I\ can\ refactor\ all\ this\ into\ an\ all-purpose\ method\ that\ \r\n\ returns\ an\ enum\ stating\ WHICH\ player\ is\ in\ check.\ The\ less\ \r\n\ clone-boards\ I\ have\ to\ create,\ the\ better.\r\n\ \r\n\ @returns\ true\ if\ the\ Move\ would\ put\ the\ other\ player's\ King\ in\ check.\r\n
comment2.params=
comment2.target=Board\ clone()
comment20.params=m\ isWhite
comment20.target=boolean\ wouldCauseCheckFixAttempt(Move,\ boolean)
comment20.text=\r\n\ Hopefully\ I\ can\ make\ this\ more\ efficient.\ I\ might\ not\ need\ to\ make\ an\ entire\ clone.\r\n\ \r\n\ I\ don't\ think\ this\ will\ work.\ The\ Pawns\ are\ causing\ issues.\r\n
comment21.params=isWhite
comment21.target=int\ isMate(boolean)
comment21.text=\r\n\ Figures\ out\ if\ the\ given\ player\ is\ in\ checkmate\ or\ stalemate.\r\n\ \r\n\ I\ thought\ that\ this\ would\ be\ a\ lot\ more\ difficult,\ but\ thanks\ to\ a\ trick\ involving\ the\ SelfChecks,\r\n\ it\ ended\ up\ being\ pretty\ simple.\r\n\ \r\n\ @param\ isWhite\ \ \ \ Whether\ the\ player\ is\ black\ or\ white.\r\n\ @return\ \ \ \ \ \ \ \ \ \ \ 1\ if\ Checkmate\r\n\ @return\ \ \ \ \ \ \ \ \ \ -1\ if\ Stalemate.\r\n\ @return\ \ \ \ \ \ \ \ \ \ \ 0\ if\ Neither.\r\n
comment22.params=m\ isWhite
comment22.target=int\ wouldCauseMate(Move,\ boolean)
comment23.params=k\ r
comment23.target=boolean\ canCastle(King,\ Rook)
comment24.params=k\ r
comment24.target=boolean\ castle(King,\ Rook)
comment24.text=\r\n\ Maybe\ I\ can\ put\ the\ castling\ moves\ in\ their\ own\ little\ moveList.\r\n
comment25.params=p
comment25.target=void\ addPiece(Piece)
comment26.params=p
comment26.target=void\ removePiece(Piece)
comment27.params=isWhite
comment27.target=java.util.ArrayList\ getPieces(boolean)
comment27.text=\r\n\ Combined\ version\ of\ two\ older\ methods,\ getWhitePieces()\ and\ getBlackPieces().\r\n\ \r\n\ @param\ isWhite\ \ \ \ Whether\ the\ player\ is\ black\ or\ white.\r\n\ @return\ \ \ \ \ \ \ \ \ \ \ ArrayList\ containing\ that\ player's\ pieces.\r\n
comment28.params=
comment28.target=java.util.ArrayList\ getAllPieces()
comment28.text=\r\n\ Quick\ way\ to\ get\ all\ of\ the\ pieces.\r\n\ \r\n\ @return\ \ \ \ \ \ \ \ \ \ \ ArrayList\ containing\ all\ pieces.\r\n
comment29.params=isWhite
comment29.target=King\ getKing(boolean)
comment29.text=\r\n\ Combined\ version\ of\ two\ older\ methods,\ getWhiteKing()\ and\ getBlackKing().\r\n\ \r\n\ @param\ isWhite\ \ \ \ Whether\ the\ player\ is\ black\ or\ white.\r\n\ @return\ \ \ \ \ \ \ \ \ \ \ That\ player's\ King.\r\n
comment3.params=m
comment3.target=Board\ getMoveResult(Move)
comment3.text=\r\n\ Takes\ in\ a\ move\ and\ returns\ a\ clone\ of\ this\ board\ with\ that\ move\ performed.\r\n
comment30.params=isWhite
comment30.target=java.util.ArrayList\ getRooks(boolean)
comment30.text=\r\n\ Gets\ an\ ArrayList\ of\ all\ rooks\ of\ a\ specified\ player.\r\n\ Used\ with\ castling.\r\n\ \r\n\ @param\ isWhite\ \ \ \ Whether\ the\ player\ is\ black\ or\ white.\r\n\ @return\ \ \ \ \ \ \ \ \ \ \ That\ player's\ rooks.\r\n
comment31.params=
comment31.target=boolean\ isWhoseTurn()
comment32.params=
comment32.target=void\ printBoard()
comment32.text=\r\n\ Prints\ out\ a\ text\ representation\ of\ the\ board\ to\ the\ console.\r\n\ Used\ for\ testing.\r\n
comment4.params=p\ getChecks\ getCastles\ getMates
comment4.target=ValidMoveList\ getValidMoves(Piece,\ boolean,\ boolean,\ boolean)
comment4.text=\r\n\ Requests\ a\ piece's\ moveset,\ then\ does\ a\ second\ pass\ on\ it\ to\ apply\ it\ to\ the\ board's\ current\ state.\r\n\ This\ is\ one\ of\ the\ most\ complex\ single\ methods\ I've\ ever\ written.\r\n\ \r\n\ I\ could\ probably\ refactor\ this\ into\ the\ ValidMoveList\ class,\ if\ I\ REALLY\ wanted\ to.\r\n
comment5.params=p
comment5.target=ValidMoveList\ getValidMoves(Piece)
comment6.params=s
comment6.target=ValidMoveList\ getValidMoves(Square)
comment7.params=x\ y
comment7.target=ValidMoveList\ getValidMoves(int,\ int)
comment8.params=isWhite\ getChecks\ getCastles\ getMates
comment8.target=ValidMoveList\ getAllValidMoves(boolean,\ boolean,\ boolean,\ boolean)
comment8.text=\r\n\ Gets\ every\ possible\ move\ of\ every\ piece\ a\ player\ has.\r\n\ \r\n\ @param\ isWhite\ \ \ Whether\ the\ player\ is\ black\ or\ white.\r\n\ @return\ \ \ \ \ \ \ \ \ \ ValidMoveList\ containing\ all\ of\ that\ player's\ possible\ moves.\r\n
comment9.params=isWhite
comment9.target=ValidMoveList\ getAllValidMoves(boolean)
numComments=33
