#BlueJ class context
comment0.params=startX\ startY\ theStage
comment0.target=BaseActor(float,\ float,\ com.badlogic.gdx.scenes.scene2d.Stage)
comment0.text=\r\n\ \ Initializes\ position\ and\ stage\ of\ object,\ and\ adds\ instance\ to\ corresponding\ list.\r\n\ \ @param\ startX\ Initial\ X\ coordinate\ of\ actor.\r\n\ \ @param\ startY\ Initial\ Y\ coordinate\ of\ actor.\r\n\ \ @param\ theStage\ Stage\ to\ which\ this\ actor\ should\ be\ added.\ \r\n\ \ If\ set\ to\ null,\ object\ will\ be\ destroyed\ when\ lists\ are\ updated,\ unless\ added\ to\ a\ stage/table\ later.\r\n
comment1.params=className
comment1.target=java.util.ArrayList\ getList(java.lang.String)
comment1.text=\r\n\ \ Retrieves\ a\ list\ of\ all\ instances\ of\ the\ object\ with\ the\ given\ class\ name.\r\n\ \ If\ no\ instances\ exist,\ returns\ an\ empty\ class.\r\n\ \ Useful\ when\ coding\ interactions\ between\ different\ types\ of\ game\ objects\ in\ update\ method.\r\n\ \ @param\ className\ name\ of\ a\ class\ that\ extends\ the\ BaseActor\ class\r\n\ \ @return\ list\ of\ instances\ of\ the\ object\ with\ the\ given\ class\ name\ \r\n
comment10.params=pause
comment10.target=void\ setAnimationPause(boolean)
comment10.text=\r\n\ \ Set\ the\ pause\ state\ of\ the\ animation.\r\n\ \ @param\ pause\ true\ to\ pause\ animation,\ false\ to\ resume\ animation\r\n
comment11.params=w\ h
comment11.target=void\ setSize(float,\ float)
comment11.text=\r\n\ \ Set\ size\ of\ Actor;\ values\ also\ used\ to\ set\ origin\ to\ center\ \r\n\ \ and\ initialize\ bounding\ polygon\ to\ rectangle.\ <br>\r\n\ \ Automatically\ called\ when\ initial\ animation\ is\ set.\r\n\ \ @param\ w\ width\ \r\n\ \ @param\ h\ height\r\n
comment12.params=numSides
comment12.target=void\ setCollisionPolygon(int)
comment12.text=\r\n\ \ Replace\ default\ (rectangle)\ collision\ polygon\ with\ an\ n-sided\ polygon.\ <br>\r\n\ \ Vertices\ of\ polygon\ lie\ on\ the\ ellipse\ contained\ within\ bounding\ rectangle.\r\n\ \ Note\:\ one\ vertex\ will\ be\ located\ at\ point\ (0,width);\r\n\ \ a\ 4-sided\ polygon\ will\ appear\ in\ the\ orientation\ of\ a\ diamond.\r\n\ \ @param\ numSides\ number\ of\ sides\ of\ the\ collision\ polygon\r\n
comment13.params=
comment13.target=com.badlogic.gdx.math.Polygon\ getBoundingPolygon()
comment13.text=\r\n\ \ Returns\ bounding\ polygon\ for\ this\ BaseActor,\ adjusted\ by\ Actor's\ current\ position\ and\ rotation.\r\n\ \ @return\ bounding\ polygon\ for\ this\ BaseActor\r\n
comment14.params=other
comment14.target=boolean\ overlaps(BaseActor)
comment14.text=\r\n\ \ Determine\ if\ this\ BaseActor\ overlaps\ other\ BaseActor\ (according\ to\ collision\ polygons).\r\n\ \ @param\ other\ BaseActor\ to\ check\ for\ overlap\r\n\ \ @return\ true\ if\ collision\ polygons\ of\ this\ and\ other\ BaseActor\ overlap\r\n\ \ @see\ \#setSize\r\n\ \ @see\ \#setCollisionPolygon\r\n
comment15.params=other
comment15.target=void\ preventOverlap(BaseActor)
comment15.text=\r\n\ \ Implement\ a\ "solid"-like\ behavior\:\r\n\ \ when\ there\ is\ overlap,\ move\ this\ BaseActor\ away\ from\ other\ BaseActor\r\n\ \ along\ minimum\ translation\ vector\ until\ there\ is\ no\ overlap.\r\n\ \ @param\ other\ BaseActor\ to\ check\ for\ overlap\r\n
comment16.params=width\ height
comment16.target=void\ setWorldBounds(float,\ float)
comment16.text=\r\n\ \ Set\ world\ dimensions\ for\ use\ by\ methods\:\r\n\ \ boundToWorld(),\ scrollTo(),\ wrap(),\ isOutsideWorld(),\ alignToWorldCenter()\ \ methods.\r\n\ \ @param\ width\ width\ of\ world\r\n\ \ @param\ height\ height\ of\ world\r\n
comment17.params=ba
comment17.target=void\ setWorldBounds(BaseActor)
comment17.text=\r\n\ \ Set\ world\ dimensions\ for\ use\ by\ methods\:\r\n\ \ boundToWorld(),\ scrollTo(),\ wrap(),\ isOutsideWorld(),\ alignToWorldCenter()\ \ methods.\r\n\ \ @param\ BaseActor\ whose\ size\ determines\ the\ world\ bounds\ (typically\ a\ background\ image)\r\n
comment18.params=
comment18.target=void\ boundToWorld()
comment18.text=\r\n\ If\ an\ edge\ of\ an\ object\ moves\ past\ the\ world\ bounds,\ \r\n\ \ \ adjust\ its\ position\ to\ keep\ it\ completely\ on\ screen.\r\n
comment19.params=
comment19.target=void\ scrollTo()
comment19.text=\r\n\ \ Center\ camera\ on\ this\ object,\ while\ keeping\ camera's\ range\ of\ view\ \r\n\ \ (determined\ by\ screen\ size)\ completely\ within\ world\ bounds.\r\n
comment2.params=
comment2.target=void\ updateAllLists()
comment2.text=\r\n\ \ Keeps\ the\ Actor\ references\ in\ Stage\ and\ BaseActor\ lists\ in\ sync\:\r\n\ \ if\ an\ Actor\ has\ been\ removed\ from\ its\ Stage,\ \r\n\ \ it\ will\ be\ removed\ from\ the\ corresponding\ BaseActor\ list\ as\ well.\r\n
comment20.params=
comment20.target=void\ wrap()
comment20.text=\ \r\n\ \ If\ this\ object\ moves\ completely\ past\ the\ world\ bounds,\r\n\ \ adjust\ its\ position\ to\ the\ opposite\ side\ of\ the\ world.\r\n
comment21.params=
comment21.target=boolean\ isOutsideWorld()
comment21.text=\r\n\ \ Determine\ if\ this\ object\ is\ completely\ outside\ the\ world\ boundaries.\r\n\ \ Useful\ for\ identifying\ objects\ that\ can\ be\ removed\ from\ the\ game,\ to\ improve\ performance.\r\n\ \ @return\ true\ if\ bounding\ rectangle\ is\ completely\ outside\ world\ bounds\r\n
comment22.params=
comment22.target=void\ alignToWorldCenter()
comment22.text=\r\n\ \ Center\ BaseActor\ within\ world\ boundaries.\r\n
comment23.params=other
comment23.target=void\ alignToActorCenter(BaseActor)
comment23.text=\ \r\n\ \ Repositions\ this\ BaseActor\ so\ its\ center\ is\ aligned\r\n\ \ with\ center\ of\ other\ BaseActor.\ Useful\ when\ one\ BaseActor\ spawns\ another.\r\n\ \ @param\ other\ BaseActor\ to\ align\ this\ BaseActor\ with\r\n
comment24.params=
comment24.target=float\ getSpeed()
comment24.text=\r\n\ \ Calculates\ the\ speed\ of\ movement\ (in\ pixels/second).\r\n\ \ @return\ speed\ of\ movement\ (pixels/second)\r\n
comment25.params=
comment25.target=float\ getMotionAngle()
comment25.text=\r\n\ \ Calculates\ the\ angle\ of\ motion\ (in\ degrees),\ calculated\ from\ the\ velocity\ vector.\r\n\ \ <br>\r\n\ \ To\ align\ actor\ image\ angle\ with\ motion\ angle,\ use\ <code>setRotation(\ getMotionAngle()\ )</code>.\r\n\ \ @return\ angle\ of\ motion\ (degrees)\r\n
comment26.params=angle
comment26.target=void\ accelerate(float)
comment26.text=\r\n\ \ Update\ accelerate\ vector\ by\ angle\ and\ value\ stored\ in\ acceleration\ field.\r\n\ \ Acceleration\ is\ applied\ by\ <code>applyPhysics</code>\ method.\r\n\ \ @param\ angle\ Angle\ (degrees)\ in\ which\ to\ accelerate.\r\n\ \ @see\ \#acceleration\r\n\ \ @see\ \#applyPhysics\r\n
comment27.params=
comment27.target=void\ accelerate()
comment27.text=\r\n\ \ Update\ accelerate\ vector\ by\ current\ rotation\ angle\ and\ value\ stored\ in\ acceleration\ field.\r\n\ \ Acceleration\ is\ applied\ by\ <code>applyPhysics</code>\ method.\r\n\ \ @see\ \#acceleration\r\n\ \ @see\ \#applyPhysics\r\n
comment28.params=dt
comment28.target=void\ applyPhysics(float)
comment28.text=\r\n\ \ Calculate\ new\ velocity\ vector\ based\ on\ acceleration\ vector,\ then\ adjust\ position\ based\ on\ velocity\ vector.\ <br>\r\n\ \ If\ not\ accelerating,\ deceleration\ value\ is\ applied.\ <br>\r\n\ \ Speed\ is\ limited\ by\ maxSpeed\ value.\ <br>\r\n\ \ Acceleration\ vector\ reset\ to\ (0,0)\ at\ end\ of\ method.\ <br>\r\n\ \ @param\ dt\ Time\ elapsed\ since\ previous\ frame\ (delta\ time);\ typically\ obtained\ from\ <code>act</code>\ method.\r\n\ \ @see\ \#acceleration\r\n\ \ @see\ \#deceleration\r\n\ \ @see\ \#maxSpeed\r\n
comment29.params=dt
comment29.target=void\ act(float)
comment29.text=\r\n\ \ Processes\ all\ Actions\ and\ related\ code\ for\ this\ object;\ \r\n\ \ automatically\ called\ by\ act\ method\ in\ Stage\ class.\r\n\ \ @param\ dt\ elapsed\ time\ (second)\ since\ last\ frame\ (supplied\ by\ Stage\ act\ method)\r\n
comment3.params=className
comment3.target=void\ updateList(java.lang.String)
comment3.text=\r\n\ \ Internal\ method\ for\ updating\ individual\ BaseActor\ lists.\r\n\ \ @param\ className\ name\ of\ a\ class\ that\ extends\ the\ BaseActor\ class\r\n\ \ @see\ \#updateAllLists\r\n
comment30.params=batch\ parentAlpha
comment30.target=void\ draw(com.badlogic.gdx.graphics.g2d.Batch,\ float)
comment30.text=\r\n\ \ Draws\ current\ frame\ of\ animation;\ automatically\ called\ by\ draw\ method\ in\ Stage\ class.\ <br>\r\n\ \ If\ color\ has\ been\ set,\ image\ will\ be\ tinted\ by\ that\ color.\ <br>\r\n\ \ If\ no\ animation\ has\ been\ set\ or\ object\ is\ invisible,\ nothing\ will\ be\ drawn.\r\n\ \ @param\ batch\ (supplied\ by\ Stage\ draw\ method)\r\n\ \ @param\ parentAlpha\ (supplied\ by\ Stage\ draw\ method)\r\n\ \ @see\ \#setColor\r\n\ \ @see\ \#setVisible\r\n\ \ \r\n
comment4.params=className
comment4.target=int\ count(java.lang.String)
comment4.text=\r\n\ \ Returns\ number\ of\ instances\ of\ a\ given\ class\ (that\ extends\ BaseActor).\r\n\ \ @param\ className\ name\ of\ a\ class\ that\ extends\ the\ BaseActor\ class\r\n\ \ @return\ number\ of\ instances\ of\ the\ class\r\n
comment5.params=
comment5.target=void\ clearAllLists()
comment5.text=\ \ \r\n\ \ This\ method\ removes\ all\ lists.\r\n\ \ It\ is\ useful\ when\ re-loading\ a\ screen,\ \r\n\ \ to\ avoid\ storing\ references\ to\ previously\ created\ objects.\r\n
comment6.params=anim
comment6.target=void\ setAnimation(com.badlogic.gdx.graphics.g2d.Animation)
comment6.text=\r\n\ Sets\ the\ animation\ used\ when\ rendering\ this\ actor;\ \r\n\ also\ sets\ actor\ size\ (if\ size\ is\ currently\ not\ set).\r\n\ @param\ anim\ animation\ that\ will\ be\ drawn\ when\ actor\ is\ rendered\r\n
comment7.params=frameDuration\ loop\ fileNames
comment7.target=com.badlogic.gdx.graphics.g2d.Animation\ loadAnimationFromFiles(float,\ boolean,\ java.lang.String[])
comment7.text=\r\n\ Creates\ an\ animation\ from\ images\ stored\ in\ separate\ files.\r\n\ @param\ frameDuration\ how\ long\ each\ frame\ should\ be\ displayed\r\n\ @param\ loop\ should\ the\ animation\ loop\r\n\ @param\ fileNames\ names\ of\ files\ containing\ animation\ images\r\n\ @return\ animation\ created\ (useful\ for\ storing\ multiple\ animations)\r\n
comment8.params=frameDuration\ loop\ fileName\ rows\ cols
comment8.target=com.badlogic.gdx.graphics.g2d.Animation\ loadAnimationFromSheet(float,\ boolean,\ java.lang.String,\ int,\ int)
comment8.text=\r\n\ Creates\ an\ animation\ from\ a\ spritesheet\:\ a\ rectangular\ grid\ of\ images\ stored\ in\ a\ single\ file.\r\n\ @param\ frameDuration\ how\ long\ each\ frame\ should\ be\ displayed\r\n\ @param\ loop\ should\ the\ animation\ loop\r\n\ @param\ fileName\ name\ of\ file\ containing\ spritesheet\r\n\ @param\ rows\ number\ of\ rows\ of\ images\ in\ spritesheet\r\n\ @param\ cols\ number\ of\ columns\ of\ images\ in\ spritesheet\r\n\ @return\ animation\ created\ (useful\ for\ storing\ multiple\ animations)\r\n
comment9.params=fileName
comment9.target=com.badlogic.gdx.graphics.g2d.Animation\ loadTexture(java.lang.String)
comment9.text=\r\n\ \ Convenience\ method\ for\ creating\ a\ 1-frame\ animation\ from\ a\ single\ texture.\r\n\ \ @param\ fileName\ names\ of\ image\ file\r\n\ \ @return\ animation\ created\ (useful\ for\ storing\ multiple\ animations)\r\n
numComments=31
